# Author: Adolfo Di Carlo Martinez Martinez - dicarlomtz@gmail.com
from argparse import ArgumentParser
from pathlib import Path
import subprocess
import json
import sys

TOOL_DESC = "Simplifies STS tokens used for accessing AWS through aws-cli commands"
MFA_TOKEN_HELP = "MFA code generated by your (virtual) device"
MFA_ARN_HELP = "AWS ARN for your (virtual) device"
PROFILE_HELP = "Time in seconds before the new token expires. (Min)900s - (Max)129600s"
TIME_HELP = "AWS Profile that you want to use from your ars credentials file"

def commands_parser():
  print(f'[+] Parsing object for given arguments\n')

  parser = ArgumentParser(description=TOOL_DESC)

  parser.add_argument('-m', '--mfa-token', dest='mfa_token', help=MFA_TOKEN_HELP, default=None)
  parser.add_argument('-a', '--mfa-arn', dest='mfa_arn', help=MFA_ARN_HELP, default=None)
  parser.add_argument('-p', '--profile', dest='profile', help=PROFILE_HELP, default='default')
  parser.add_argument('-t', '--time', dest='time', help=TIME_HELP, default=8*60*60) # 8 hours

  args = parser.parse_args()
  print(f'[+] Generating STS token for profile: {args.profile}\n')
  print(f'\t[*] mfa_token: {args.mfa_token}\n')
  print(f'\t[*] mfa_arn: {args.mfa_arn}\n')
  print(f'\t[*] time: {(args.time / 60) / 60} hours\n')

  if (args.mfa_token == None and args.mfa_arn != None) or (args.mfa_token != None and args.mfa_arn == None):
    print(f'[-] You must pass both --mfa-token (-m) and --mfa-arn (-a) arguments.\n')
    sys.exit(1)

  return args

def create_sts_command(mfa_token: str | None, mfa_arn: str, profile: str, time: int):
  return f"sts get-session-token \
            --duration-seconds {time} \
            {'--serial-number ' + mfa_arn if mfa_token != None else ''} \
            {'--token-code ' + mfa_token if mfa_token != None else ''} \
            {'--profile ' + profile if profile != 'default' else ''} \
        ".strip()

def unset_temporal_env_tokens():
  subprocess.run("unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN", shell=True)

def execute_sts_command(sts_command: str):
  try:
    print("[+] Executing STS command with given arguments.")
    return subprocess.run("aws " + f"{sts_command}", shell=True, capture_output=True, text=True, check=True).stdout
  except Exception as e:
    print(f"[-] There was an error executing STS command: {e}")
    print("[-] Please check you are passing the right arguments.")
    sys.exit(1)

def pull_mfa_arn(profile: str):
  config_file_path = str(f'{Path.home()}/.aws_arn_profiles.json')

  print(f'[+] Pulling mfa_arn from configuration file: {config_file_path}\n')

  try:
    with open(config_file_path) as config_file:
      config = json.load(config_file)
  except Exception:
    print(f'[-] Failed to load configuration file: {config_file_path}\n')
    sys.exit(1)

  mfa_arn = config['default'][0]['arn_device'] if profile == 'default' else config[profile][0]['arn_device']
  print(f'\t[*] mfa_arn: {mfa_arn}\n')
  return mfa_arn

def create_env_variables_command(temporal_tokens):
  temporal_data = json.loads(temporal_tokens)
  temporal_credentials = temporal_data['Credentials']
  temporaL_access_key = temporal_credentials['AccessKeyId']
  temporal_secret_key = temporal_credentials['SecretAccessKey']
  temporal_session_token = temporal_credentials['SessionToken']

  export_command = f"export AWS_ACCESS_KEY_ID={temporaL_access_key} \
                     && export AWS_SECRET_ACCESS_KEY={temporal_secret_key} \
                     && export AWS_SESSION_TOKEN={temporal_session_token}"

  print(f'[+] Generating export command for temporal tokens\n')
  print(f'\t[*] AWS_ACCESS_KEY_ID: {temporaL_access_key}\n')
  print(f'\t[*] AWS_SECRET_ACCESS_KEY: {temporal_secret_key}\n')
  print(f'\t[*] AWS_SESSION_TOKEN: {temporal_session_token}\n')

  return export_command

def execute_export_command(export_command):
  platform = sys.platform

  if platform == 'darwin':
    terminal_command = f"/usr/bin/osascript -e 'tell application \"Terminal\" to do script \"{export_command}\"' && source ~/.bashrc"
    subprocess.run(terminal_command, shell=True)
  elif platform == 'linux':
    terminal_command = f"gnome-terminal -- bash -c '{export_command}' && source ~/.bashrc"
    subprocess.run(terminal_command, shell=True)
  else:
    print(f'[+] Unsupported platform: {platform}\n')
    print(f'[+] Copy and paste the following command in your terminal: {export_command}\n')

  print(f'[+] Done!\n')
  print(f'[+] After setting the temporal tokens, run: aws sts get-caller-identity to check if they are set\n')


if __name__ == '__main__':

  args = commands_parser()
  mfa_arn = args.mfa_arn if args.mfa_arn != None else pull_mfa_arn(args.profile) if args.mfa_token != None else args.mfa_arn
  sts_command = create_sts_command(args.mfa_token, mfa_arn, args.profile, args.time)
  unset_temporal_env_tokens()
  sts_output = execute_sts_command(sts_command)
  export_command = create_env_variables_command(sts_output)
  execute_export_command(export_command)
  sys.exit(0)
